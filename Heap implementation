#include<bits/stdc++.h>

using namespace std;
struct Heap{
  int heapSize;
  int capacity;
  int *heap;
};
  
Heap *createHeap(unsigned short );
Heap *increaseKey(Heap *, int , int );
Heap *maxHeapify(Heap *, int );
Heap *insert(Heap *, int );
Heap *extractMax(Heap *);
int getMax(Heap *);
void swap(int *, int *);
void printHeap(Heap *);
  

Heap *createHeap(int capacity){  
  Heap *maxHeap;
  maxHeap = (Heap *)malloc(sizeof(Heap));
  maxHeap->heap = (int *)malloc( sizeof(int)*capacity);
  maxHeap->capacity = capacity;
  maxHeap->heapSize = 0;
  
  return maxHeap;
}
      
void swap(int *p, int *q){
  int temp;
  temp = *p;
  *p = *q;
  *q = temp;
}
  
 
Heap * insert(Heap *maxHeap, int key){
  int temp = maxHeap->heapSize;
  
  if(maxHeap->heapSize == maxHeap->capacity)
    printf("\nHeap overflow");
    
  maxHeap->heapSize++ ; 
  maxHeap->heap[temp] = key; 
  
  if(maxHeap->heapSize == 1)
    return maxHeap;
 
  while(maxHeap->heap[(temp-1)/2] < key && temp != 0){
    maxHeap->heap[temp] = maxHeap->heap[(temp-1)/2];
    temp = (temp-1)/2;
  }
  maxHeap->heap[temp] = key;
  
  return maxHeap;
}

Heap *increaseKey(Heap *maxHeap, int nKey, int index){
  int temp;
  
  if(maxHeap->heap[index] >= nKey)
    printf("\nInvalid operation");
  else{
    maxHeap->heap[index] = nKey;
    temp = index;
    while(maxHeap->heap[(temp-1)/2] < nKey && temp != 0){
      maxHeap->heap[temp] = maxHeap->heap[(temp-1)/2];
      temp = (temp-1)/2;
    }
    maxHeap->heap[temp] = nKey;
  }
    
  return maxHeap;  
}  
  
Heap *maxHeapify(Heap *maxHeap, int i){
  
  int L, R, largest; 
  

  L = 2*i+1;
  R = 2*i+2; 
  
  if(L <= maxHeap->heapSize-1 && maxHeap->heap[L] > maxHeap->heap[i])
    largest = L;
  else 
    largest = i;
  
  if(R <= maxHeap->heapSize-1 && maxHeap->heap[R] > maxHeap->heap[largest])
    largest = R;
  
  if(largest != i){
    swap(&(maxHeap->heap[i]), &(maxHeap->heap[largest]));
    maxHeapify(maxHeap, largest);
  }
  return maxHeap;
}    

Heap *extractMax(Heap *maxHeap){
  int temp, extractedKey;
  
  if(maxHeap->heapSize == 0){
    printf("\nHeap Underflow");
    return maxHeap;
  }
  else{
    temp = maxHeap->heapSize-1;
  
    extractedKey = maxHeap->heap[0];
    maxHeap->heap[0] = maxHeap->heap[temp];
    maxHeap->heapSize--;
    
    maxHeap = maxHeapify(maxHeap, 0);   
    
    printf("\nKey Extracted:%d", extractedKey);
    return maxHeap;
  }
}
  
int getMax(Heap *maxHeap){
  return maxHeap->heap[0];
}

void printHeap(Heap *maxHeap){
  int i;
  printf("\nKeys in Heap:");
  for( i = 0; i < maxHeap->heapSize; i++ )
    printf("%d ", maxHeap->heap[i]);
}

int main(){
  
  int ch, val;
   cout<<"Select any one:"<<endl;
   cout<<"1) Create Heap"<<endl;
   cout<<"2) Insert elements"<<endl;
   cout<<"3) Display"<<endl;
   cout<<"4) Get Max Key"<<endl;
   cout<<"5) Increase Key"<<endl;
   cout<<"6) Extract Key"<<endl;
   cout<<"7) Exit"<<endl;
   do {
      cout<<"Enter choice"<<endl;
      cin>>ch;
       Heap *maxHeap;
       int capacity;
      switch(ch) {
         case 1: {
            cout<<"Enter capacity:"<<endl;
            cin>>capacity;
            maxHeap = createHeap(capacity);
            break;
         }
         case 2: {
            int val;
            cout<<"Enter value to be inserted:"<<endl;
            cin>>val;
            maxHeap = insert(maxHeap,val);
            break;
         }
         case 3: {
            printHeap(maxHeap);
            break;
         }
         case 4: {
            int getMaxKey;
            getMaxKey = getMax(maxHeap);
            cout<<"MaxKey:"<<getMaxKey;
            break;
         }
         case 5: {
            int x,y;
            cout<<"Enter key and index";
            cin>>x>>y;
            maxHeap = increaseKey(maxHeap, x, y);  
            printHeap(maxHeap);
            break;
         }
         case 6:{
            maxHeap = extractMax(maxHeap);
            printHeap(maxHeap);
            break;
         }
         case 7:{
             cout<<"Exit"<<endl;
         }
         default: {
            cout<<"Invalid Choice"<<endl;
         }
      }
   }while(ch!=7);
  
}
